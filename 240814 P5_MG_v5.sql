-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.

-- création des tables



BEGIN;


CREATE TABLE IF NOT EXISTS public.region
(
    code_reg integer NOT NULL,
    nom_reg character varying(40) NOT NULL,
    PRIMARY KEY (code_reg)
);

CREATE TABLE IF NOT EXISTS public.departement
(
    code_dep character varying(3) COLLATE pg_catalog."default" NOT NULL,
    nom_dep character varying(100) COLLATE pg_catalog."default" NOT NULL,
    code_reg integer NOT NULL,
    CONSTRAINT departement_pkey PRIMARY KEY (code_dep)
);

CREATE TABLE IF NOT EXISTS public.commune
(
    code_dep_code_com character varying(6) COLLATE pg_catalog."default" NOT NULL,
    nom_commune character varying(100) COLLATE pg_catalog."default" NOT NULL,
    code_com integer NOT NULL,
    code_dep character varying(3) COLLATE pg_catalog."default" NOT NULL,
    population integer NOT NULL,
    CONSTRAINT commune_pkey PRIMARY KEY (code_dep_code_com)
);

CREATE TABLE IF NOT EXISTS public.bien
(
    id_bien serial NOT NULL,
    no_voie integer,
    "BTQ" "char",
    type_voie character varying(4) COLLATE pg_catalog."default",
    voie character varying(100) COLLATE pg_catalog."default",
    code_dep_code_com character varying(6) COLLATE pg_catalog."default" NOT NULL,
    type_local character varying(20) COLLATE pg_catalog."default",
    surface_carrez numeric NOT NULL,
    surface_bati integer,
    nb_pieces integer,
    PRIMARY KEY (id_bien)
);

CREATE TABLE IF NOT EXISTS public.vente
(
    id_vente serial,
    prix numeric,
    date date,
    id_bien integer,
    PRIMARY KEY (id_vente)
);

ALTER TABLE IF EXISTS public.commune
    ADD CONSTRAINT code_dep FOREIGN KEY (code_dep)
    REFERENCES public.departement (code_dep) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.departement
    ADD FOREIGN KEY (code_reg)
    REFERENCES public.region (code_reg) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.bien
    ADD CONSTRAINT "bien_Code_dep_code_com_fkey" FOREIGN KEY (code_dep_code_com)
    REFERENCES public.commune (code_dep_code_com) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.vente
    ADD FOREIGN KEY (id_bien)
    REFERENCES public.bien (id_bien) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;


-- Import des données 

COPY region
FROM 'C:\Users\LENOVO\Desktop\Data\region.csv'
DELIMITER ';'
CSV HEADER;

COPY departement
FROM 'C:\Users\LENOVO\Desktop\Data\departement.csv'
DELIMITER ';'
CSV HEADER;

COPY commune
FROM 'C:\Users\LENOVO\Desktop\Data\commune.csv'
DELIMITER ';'
CSV HEADER;

COPY bien
FROM 'C:\Users\LENOVO\Desktop\Data\bien.csv'
DELIMITER ';'
CSV HEADER;

COPY vente
FROM 'C:\Users\LENOVO\Desktop\Data\vente.csv'
DELIMITER ';'
CSV HEADER;

-- Visualisation
SELECT * FROM vente;
SELECT * FROM bien;
SELECT * FROM commune;
SELECT * FROM departement;
SELECT * FROM region;

SELECT count(*), nom_commune from commune group by nom_commune having count(*) > 1;

	
SELECT * FROM vente
	WHERE prix ISNULL;

SELECT sum(prix) FROM vente;

-- Suppression des tables

DROP TABLE vente, bien, commune, departement, region;

--1. Nombre total d’appartements vendus au 1er semestre 2020.
SELECT
	COUNT(v.id_vente) AS nombre_ventes_S1_2020
	FROM vente v
	NATURAL JOIN bien b
	WHERE v.date BETWEEN '2020-01-01' AND '2020-06-30'
	AND b.type_local = 'Appartement';

--2. Le nombre de ventes d’appartement par région pour le 1er semestre 2020.


SELECT
	r.code_reg,
	r.nom_reg,
	COUNT(*) AS nb_ventes
	FROM vente v
	NATURAL JOIN bien b
	NATURAL JOIN commune c
	NATURAL JOIN departement d
	NATURAL JOIN region r
	WHERE b.type_local = 'Appartement'
	AND v.date BETWEEN '2020-01-01' AND '2020-06-30'
	GROUP BY r.nom_reg, r.code_reg;


--3. Proportion des ventes d’appartements par le nombre de pièces.

WITH constantes AS 
	(SELECT COUNT(*) as total_ventes 
	FROM vente v 
	NATURAL JOIN bien b
	WHERE b.type_local = 'Appartement' )
SELECT b.nb_pieces,
	TO_CHAR(100*CAST(COUNT(v.id_vente) AS DECIMAL) / cs.total_ventes, '00D00%') 
		AS prop_appartements,
	COUNT(v.id_vente) as nb_ventes
	FROM bien b
	NATURAL JOIN vente v
	CROSS JOIN constantes cs
	WHERE b.type_local = 'Appartement'
	GROUP BY b.nb_pieces, cs.total_ventes
	ORDER BY b.nb_pieces;

--4. Liste des 10 départements où le prix du mètre carré est le plus élevé.
SELECT
	d.nom_dep,
	d.code_dep,
	ROUND(AVG(v.prix/b.surface_carrez)) as prix_m2,
	count(*) as nb_ventes
	FROM departement d
	NATURAL JOIN commune c
	NATURAL JOIN bien b
	NATURAL JOIN vente v
	WHERE v.prix NOTNULL
	GROUP BY d.nom_dep, d.code_dep
	ORDER BY prix_m2 DESC
	LIMIT 10;

-- 5. Prix moyen du mètre carré d’une maison en Île-de-France.

SELECT 
	r.nom_reg,
	ROUND(AVG(v.prix/b.surface_carrez)) as prix_m2
	FROM vente v
	NATURAL JOIN bien b
	NATURAL JOIN commune c
	NATURAL JOIN departement d
	NATURAL JOIN region r
	WHERE b.type_local = 'Maison'
	AND v.prix NOTNULL
	AND r.nom_reg = 'Ile-de-France'
	GROUP BY r.nom_reg;

-- 6. Liste des 10 appartements les plus chers avec la région et le nombre
-- de mètres carrés.
SELECT 	v.id_vente,
	TO_CHAR(v.prix/b.surface_carrez, '9G999G999')  AS prix_m2,
	TO_CHAR(v.prix, '9G999G999') as prix,
	b.surface_carrez,
	b.surface_bati,
	b.nb_pieces,
	c.nom_commune,
	r.nom_reg
	FROM vente v
	NATURAL JOIN bien b
	NATURAL JOIN commune c
	NATURAL JOIN departement d
	NATURAL JOIN region r
	WHERE b.type_local = 'Appartement'
	AND v.prix NOTNULL
	ORDER BY prix DESC
	LIMIT 10;

-- 7. Taux d’évolution du nombre de ventes entre le premier et le second
-- trimestre de 2020.

WITH nb_ventes_trimestre AS 
	(SELECT Cast((SELECT Count(*)
                     FROM   vente
                     WHERE  date BETWEEN '2020-01-01' AND '2020-03-31') AS
                    DECIMAL) AS
               ventes_t1_2020,
               Cast((SELECT Count(*)
                     FROM   vente
                     WHERE  date BETWEEN '2020-04-01' AND '2020-06-30') AS
                    DECIMAL) AS
               ventes_t2_2020)
SELECT 
	ventes_t1_2020,
	ventes_t2_2020,
	To_char(100 * ( ventes_t2_2020 - ventes_t1_2020 ) / ventes_t1_2020, '0D0%') AS
       taux_evolution
FROM   nb_ventes_trimestre; 


-- 8. Le classement des régions par rapport au prix au mètre carré des
-- appartement de plus de 4 pièces.

SELECT
	rank() OVER (ORDER BY Avg(v.prix/b.surface_carrez) DESC) as rang_region,
	r.nom_reg,
	ROUND(AVG(v.prix/b.surface_carrez)) as prix_m2_region_min_T4,
	count(*) as nb_ventes
FROM region r
NATURAL JOIN departement d
NATURAL JOIN commune c
NATURAL JOIN bien b
NATURAL JOIN vente v
	WHERE b.type_local = 'Appartement'
	AND b.nb_pieces >= 4
	AND v.prix NOTNULL
	GROUP BY r.nom_reg
	ORDER BY rang_region;

-- 9. Liste des communes ayant eu au moins 50 ventes au 1er trimestre

SELECT c.nom_commune,
	COUNT(v.id_vente) AS nombre_ventes
	FROM vente v
	NATURAL JOIN bien b
	NATURAL JOIN commune c
	WHERE v.date BETWEEN '2020-01-01' AND '2020-03-31'
	GROUP BY c.nom_commune
	HAVING COUNT(v.id_vente) >= 50
	ORDER BY nombre_ventes DESC;

-- 10. Différence en pourcentage du prix au mètre carré entre un
-- appartement de 2 pièces et un appartement de 3 pièces.
 
WITH constantes as
	(WITH prix_m2_pieces AS (
		SELECT nb_pieces,
			AVG(v.prix/b.surface_carrez) as prix_moyen_m2
			FROM   vente v 
			NATURAL JOIN bien b
			WHERE  b.nb_pieces in (2,3)
			AND b.type_local = 'Appartement'
			AND v.prix NOTNULL
			GROUP BY nb_pieces)
	SELECT 
		(SELECT prix_moyen_m2 FROM prix_m2_pieces WHERE nb_pieces = 2) as prix_m2_t2,
		(SELECT prix_moyen_m2 FROM prix_m2_pieces WHERE nb_pieces = 3) as prix_m2_t3)
SELECT 
	Round(prix_m2_t2) as prix_m2_t2,
	Round(prix_m2_t3) as prix_m2_t3,
	To_char(100 * ( prix_m2_t2 - prix_m2_t3 ) / prix_m2_t3, '00D0%') AS diff_prix_t2_t3	
FROM constantes;

-- 11. Les moyennes de valeurs foncières pour le top 3 des communes des
-- départements 6, 13, 33, 59 et 69.

WITH prix_moyen_commune as (	
	SELECT
		d.code_dep,
		c.nom_commune,
		count(*) as nb_ventes,
		TO_CHAR(AVG(v.prix), '999G999G999') as prix_moyen,
		rank() OVER(PARTITION by d.code_dep ORDER BY AVG(v.prix) DESC) as rang_dep
		FROM vente v
		NATURAL JOIN bien b
		NATURAL JOIN commune c
		NATURAL JOIN departement d
		WHERE d.code_dep IN ('6','13','33','59','69')
		AND v.prix NOTNULL
		GROUP BY c.nom_commune, d.code_dep)
SELECT
nom_commune,
code_dep,
rang_dep,
prix_moyen,
nb_ventes
FROM prix_moyen_commune
WHERE rang_dep <= 3
ORDER BY rang_dep;


-- 12. Les 20 communes avec le plus de transactions pour 1000 habitants
-- pour les communes qui dépassent les 10 000 habitants.

SELECT
	c.code_dep_code_com,
	c.nom_commune,
	TO_CHAR((1000*CAST(COUNT(*) AS decimal) /c.population), '0D0 ‰')  AS nb_ventes_pour_1000_hab,
	c.population
FROM commune c
NATURAL JOIN bien b
NATURAL JOIN vente v
WHERE c.population >= 10000
GROUP BY c.nom_commune, c.population, c.code_dep_code_com
ORDER BY nb_ventes_pour_1000_hab DESC LIMIT 20;